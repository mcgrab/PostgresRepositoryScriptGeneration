using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;
using Dapper;
using Npgsql;
using ScriptGeneration.Attributes;

namespace ScriptGeneration.Repository
{
    public class BaseRepository<T> : ITestRepository<T> where T : class
    {
        protected IDbConnection Connection
        {
            get => new NpgsqlConnection(ConnectionString);
        }

        protected string ConnectionString { get; }

        protected BaseRepository(IDbConnection connection)
        {
            ConnectionString = connection.ConnectionString;
        }

        public void Add(T item)
        {
            using (IDbConnection dbConnection = Connection)
            {
                dbConnection.Open();
                dbConnection.Execute(GenerateAddScript()
                    , item);
            }
        }

        public void Remove(long id)
        {
            var tableName = $"\"{typeof(T).Name}\"";
            using (IDbConnection dbConnection = Connection)
            {
                dbConnection.Open();
                dbConnection.Execute($"DELETE FROM {tableName} WHERE \"Id\" = @Id", new {Id = id});
            }
        }

        public void Update(T item, dynamic @where)
        {
            var setProp = typeof(T).GetProperties()
                .Where(x => x.GetCustomAttributes(typeof(CanUpdateAttribute), true).Length > 0).Select(x => x).ToList();
            var setPropNames = new List<string>(setProp.Count);
            dynamic expando = new ExpandoObject();
            foreach (var prop in setProp)
            {
                var name = AddProperty(expando, prop.Name, prop.GetValue(item));
                setPropNames.Add(name);
            }

            var props = ((object) @where)
                .GetType()
                .GetProperties()
                .ToDictionary(p => p.Name, p => p.GetValue(@where));
            var wherePropNames = new List<string>(props.Count);
            foreach (var prop in props)
            {
                var name = AddProperty(expando, prop.Key, prop.Value);
                wherePropNames.Add(name);
            }

            string script = GenerateUpdateScript(setPropNames, wherePropNames);
            using (IDbConnection dbConnection = Connection)
            {
                dbConnection.Open();
                dbConnection.Query(script, (object) expando);
            }
        }

        public IEnumerable<T> FindAll(int offset = 0, int count = 0, string sort = "ASC")
        {
            var tableName = $"\"{typeof(T).Name}\"";
            var limitStr = count > 0 ? $"LIMIT {count} OFFSET {offset}" : string.Empty;
            using (IDbConnection dbConnection = Connection)
            {
                dbConnection.Open();
                var script = $"SELECT * FROM {tableName} ORDER BY \"Id\" {sort}  {limitStr}";
                return dbConnection.Query<T>(script);
            }
        }

        public T GetOne(dynamic @where)
        {
            return Get(false, @where) as T;
        }

        private string GenerateUpdateScript(IEnumerable<string> set, IEnumerable<string> where)
        {
            var tableName = $"\"{typeof(T).Name}\"";

            var (setSection, whereSection) = BuildUpdateProperties(set, where);

            var test = $@"UPDATE {tableName} SET  
                {setSection}
                WHERE {whereSection}";
            return test;
        }

        private string GenerateAddScript()
        {
            var tableName = $"\"{typeof(T).Name}\"";
            var properties = typeof(T).GetProperties()
                .Where(x => x.GetCustomAttributes(typeof(AutoGeneratedAttribute), true).Length == 0)
                .Select(x => x.Name);
            var (propSql, valSql) = BuildProperties(properties);
            var test = $@"INSERT INTO {tableName} 
                ({propSql}
                    )
                VALUES(
                    {valSql}
                )";
            return test;
        }

        private (string propSql, string valSql) BuildProperties(IEnumerable<string> properties)
        {
            var propertiesSb = new StringBuilder($"\"{properties.FirstOrDefault()}\"");
            var valuesSb = new StringBuilder($"@{properties.FirstOrDefault()}");
            foreach (var prop in properties.Skip(1))
            {
                propertiesSb.Append($",\"{prop}\"");
                valuesSb.Append($",@{prop}");
            }

            return (propertiesSb.ToString(), valuesSb.ToString());
        }

        private (string setSql, string whereSql) BuildUpdateProperties(IEnumerable<string> set,
            IEnumerable<string> where)
        {
            var setSb = new StringBuilder($"\"{set.FirstOrDefault()}\" = @{set.FirstOrDefault()}");
            var whereSb = new StringBuilder($"\"{where.FirstOrDefault()}\" = @{where.FirstOrDefault()}");
            foreach (var setItem in set.Skip(1))
            {
                setSb.Append($",\"{setItem}\" = @{setItem}");
            }

            foreach (var whereItem in where.Skip(1))
            {
                whereSb.Append($" AND \"{BackwardProjection(whereItem)}\" = @{whereItem}");
            }

            return (setSb.ToString(), whereSb.ToString());
        }

        private string BuildGetProperties(IEnumerable<string> where)
        {
            var whereSb = new StringBuilder($"\"{where.FirstOrDefault()}\" = @{where.FirstOrDefault()}");
            foreach (var whereItem in where.Skip(1))
            {
                whereSb.Append($" AND \"{BackwardProjection(whereItem)}\" = @{whereItem}");
            }

            return whereSb.ToString();
        }

        private string BackwardProjection(string whereItem)
        {
            return whereItem.EndsWith('1') ? whereItem.Remove(whereItem.Length - 1) : whereItem;
        }

        private string AddProperty(ExpandoObject expando, string propertyName, object propertyValue)
        {
            // ExpandoObject supports IDictionary so we can extend it like this
            var expandoDict = expando as IDictionary<string, object>;
            if (expandoDict.ContainsKey(propertyName))
            {
                expandoDict[$"{propertyName}{1}"] = propertyValue;
                return $"{propertyName}{1}";
            }

            expandoDict.Add(propertyName, propertyValue);
            return propertyName;
        }

        private string GenerateGetScript(IEnumerable<string> where)
        {
            var tableName = $"\"{typeof(T).Name}\"";
            var whereSql = BuildGetProperties(where);
            return $"SELECT * FROM {tableName} WHERE {whereSql}";
        }

        public IEnumerable<T> GetMany(dynamic where)
        {
            return Get(true, @where) as IEnumerable<T>;
        }

        private dynamic Get(bool isMany, dynamic where)
        {
            var props = ((object) @where)
                .GetType()
                .GetProperties()
                .ToDictionary(p => p.Name, p => p.GetValue(@where));
            var wherePropNames = new List<string>(props.Count);
            dynamic expando = new ExpandoObject();
            foreach (var prop in props)
            {
                var name = AddProperty(expando, prop.Key, prop.Value);
                wherePropNames.Add(name);
            }

            var script = GenerateGetScript(wherePropNames);
            using (IDbConnection dbConnection = Connection)
            {
                dbConnection.Open();
                return isMany
                    ? dbConnection.Query<T>(script, (object) expando)
                    : (dynamic) dbConnection.Query<T>(script, (object) expando).FirstOrDefault();
            }
        }
    }
}